import asyncio
import random
from datetime import datetime, timedelta

from telegram import Update
from telegram.ext import ContextTypes

from src.backend.config import logger
from src.backend.database import pool, get_user, update_user, redis, get_payout_percent
# from src.backend.blockchain import w3, contract, usd_token # Removed
from src.backend.metrics import request_duration
from src.backend.scheduled_tasks import event_active, event_end

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    with request_duration.time():
        user_id = update.callback_query.from_user.id if update.callback_query else update.message.from_user.id
        async with pool.acquire() as conn:
            total_invested = sum([await conn.fetchval(f'SELECT SUM(investment) FROM users_shard_{i}') or 0 for i in range(10)])
            total_paid_out = await conn.fetchval('SELECT SUM(payout_received) FROM users_shard_0') or 0
        stability_index = total_invested / max(1, total_paid_out)
        stability_forecast = stability_index # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑
        advice = ""
        if stability_forecast < 1.5:
            advice = "‚ö†Ô∏è –†–∏—Å–∫ –∫—Ä–∞—Ö–∞! –ü—Ä–∏–≥–ª–∞—à–∞–π —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏."
        elif stability_forecast > 2:
            advice = "üü¢ –î–µ—Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å–µ—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω–∞! –ú–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å –≤—ã–ø–ª–∞—Ç—ã."
        else:
            advice = "üü° –ë–∞–ª–∞–Ω—Å –Ω–æ—Ä–º, –Ω–æ –ø—É—à—å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –¥–ª—è —Ä–æ—Å—Ç–∞."
        output = f"üåü –¢—ã –∑–≤–µ–∑–¥–∞ –Ω–µ–æ–Ω–æ–≤–æ–π –ü–∏—Ä–∞–º–∏–¥—ã –ë–æ–≥–∞—Ç—Å—Ç–≤–∞! ü§ë\n"
        user = await get_user(user_id) # Removed w3, usd_token
        if random.random() < 0.1 and user:
            bonus = 10
            # if w3 and usd_token and PRIVATE_KEY: # Removed blockchain logic
            #     tx = usd_token.functions.mintForPayment(user['address'], int(bonus * 1e18)).buildTransaction({
            #         'from': w3.eth.default_account,
            #         'gas': 100000,
            #         'nonce': w3.eth.get_transaction_count(w3.eth.default_account)
            #     })
            #     signed_tx = w3.eth.account.sign_transaction(tx, private_key=PRIVATE_KEY)
            #     w3.eth.send_raw_transaction(signed_tx.rawTransaction)
            await update_user(user_id, {'gameBalances': user['gameBalances'] + bonus})
            output += f"üéÅ –°—é—Ä–ø—Ä–∏–∑, {user['name']}! +{bonus} USDToken –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å!\n"
        output += f"üè∞ –î–µ—Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å–µ—Ç—å –ü–∏—Ä–∞–º–∏–¥—ã üè∞\n"
        payout_percent = await get_payout_percent() # Get from Redis
        output += f"–ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–ª–∞—Ç: {payout_percent*100:.2f}% üìà\n"
        output += f"–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å: {stability_index:.2f}\n–ü—Ä–æ–≥–Ω–æ–∑: {stability_forecast:.2f} üß†\n{advice}\n"
        if event_active and event_end:
            time_left = (event_end - datetime.now()).total_seconds()
            if time_left > 0:
                output += f"‚è∞ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –∏–≤–µ–Ω—Ç! –î–æ –∫–æ–Ω—Ü–∞: {time_left / 3600:.1f} —á–∞—Å–æ–≤ üî•\n"
        tree = await redis.get("referral_tree")
        if not tree:
            # await cache_referral_tree() # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ database.py
            tree = await redis.get("referral_tree")
        output += tree.decode() if tree else "–î–µ—Ä–µ–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ —Å—Ç—Ä–æ–∏—Ç—Å—è...\n"
        output += f"\nüí∞ –ò—Ç–æ–≥ —Ç–æ–∫–µ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —ç–∫–æ–Ω–æ–º–∏–∫–∏:\n–í–ª–æ–∂–µ–Ω–∏—è: {total_invested:.2f} USDToken\n–í—ã–ø–ª–∞—Ç—ã: {total_paid_out:.2f} USDToken\n–¢–≤–æ—è –ø—Ä–∏–±—ã–ª—å: {(total_invested - total_paid_out):.2f} USDToken\n"
        await (update.callback_query.message.reply_text if update.callback_query else update.message.reply_text)(output)