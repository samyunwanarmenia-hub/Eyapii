import asyncio
from telegram import Update
from telegram.ext import ContextTypes

from src.backend.config import logger, BASE_RETURN, FAN_SPEED_BASE, QUESTS
from src.backend.database import pool, get_user
# from src.backend.blockchain import w3, usd_token # Removed
from src.backend.metrics import request_duration

async def dashboard(update: Update, context: ContextTypes.DEFAULT_TYPE):
    with request_duration.time():
        user_id = update.callback_query.from_user.id if update.callback_query else update.message.from_user.id
        user = await get_user(user_id) # Removed w3, usd_token
        if not user:
            await (update.callback_query.message.reply_text if update.callback_query else update.message.reply_text)(
                "–¢—ã –Ω–µ –≤ –∏–≥—Ä–µ! –í—Å—Ç—É–ø–∏ —á–µ—Ä–µ–∑ /join ü§ë"
            )
            return
        fan_speed = FAN_SPEED_BASE + user['power'] * 0.1 + user['fan_speed_bonus']
        return_rate = BASE_RETURN + user['power'] * 0.1 + user['return_boost']
        async with pool.acquire() as conn:
            quests_data = await conn.fetch('SELECT quest_id, progress FROM quests WHERE user_id = $1', user_id)
        quests_output = "\n".join([f"üìú {QUESTS[q['quest_id']]['task']}: –ü—Ä–æ–≥—Ä–µ—Å—Å {q['progress']}/{2 if q['quest_id'] == 'invite_2' else 7 if q['quest_id'] == 'weekly_active' else 1}" for q in quests_data if q['quest_id'] in QUESTS])
        output = (
            f"üìà –î–∞—à–±–æ—Ä–¥ {user['name']} üìà\n"
            f"–†–∞–Ω–≥: {user['rank']}\n"
            f"–í–ª–æ–∂–µ–Ω–∏—è: {user['investment']:.2f} USDToken\n"
            f"–ë–∞–ª–∞–Ω—Å: {user['gameBalances']:.2f} USDToken\n"
            f"–ú–æ—â–Ω–æ—Å—Ç—å: {user['power']:.2f} ‚ö°\n"
            f"–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä–∞: {fan_speed:.2f}x\n"
            f"–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {return_rate*100:.2f}%/–Ω–µ–¥–µ–ª—è\n"
            f"–†–µ—Ñ–µ—Ä–∞–ª—ã: {user['referrals']}\n"
            f"–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è: {user['achievements'] or '–ù–µ—Ç'}\n"
            f"–ö–≤–µ—Å—Ç—ã:\n{quests_output or '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤'}\n"
            f"üëâ –û—Ç–∫—Ä–æ–π WebApp –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤: https://eyapi.netlify.app/dashboard/{user_id}" # Updated with your actual deployed WebApp URL
        )
        await (update.callback_query.message.reply_text if update.callback_query else update.message.reply_text)(output)