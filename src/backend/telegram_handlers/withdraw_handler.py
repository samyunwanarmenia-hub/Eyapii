import asyncio
from telegram import Update
from telegram.ext import ContextTypes

from src.backend.config import logger
from src.backend.database import get_user, update_user, add_transaction, check_transaction_limit
# from src.backend.blockchain import w3, contract, usd_token # Removed
from src.backend.game_logic import verify_captcha, verify_mfa, prove_balance
from src.backend.metrics import request_duration

async def withdraw(update: Update, context: ContextTypes.DEFAULT_TYPE):
    with request_duration.time():
        user_id = update.callback_query.from_user.id if update.callback_query else update.message.from_user.id
        if not await check_transaction_limit(user_id):
            await (update.callback_query.message.reply_text if update.callback_query else update.message.reply_text)(
                "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π! –ü–æ–¥–æ–∂–¥–∏ —á–∞—Å. ‚è≥"
            )
            return
        user = await get_user(user_id) # Removed w3, usd_token
        if not user:
            await (update.callback_query.message.reply_text if update.callback_query else update.message.reply_text)(
                "–¢—ã –Ω–µ –≤ –∏–≥—Ä–µ! –í—Å—Ç—É–ø–∏ —á–µ—Ä–µ–∑ /join ü§ë"
            )
            return
        try:
            amount = float(context.args[0]) if context.args else user['gameBalances']
            if not await verify_captcha(user_id, "withdraw", amount):
                await (update.callback_query.message.reply_text if update.callback_query else update.message.reply_text)(
                    "–ü—Ä–æ–π–¥–∏ –ø—Ä–æ–≤–µ—Ä–∫—É: https://captcha.pyramid.io"
                )
                return
            if not await verify_mfa(user_id):
                await (update.callback_query.message.reply_text if update.callback_query else update.message.reply_text)(
                    "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏ –¥–µ–π—Å—Ç–≤–∏–µ! –ö–æ–¥ MFA –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ç–µ–±–µ."
                )
                return
            if user['gameBalances'] < amount:
                await (update.callback_query.message.reply_text if update.callback_query else update.message.reply_text)(
                    "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ USDToken –Ω–∞ –±–∞–ª–∞–Ω—Å–µ! üò¢"
                )
                return
            proof = await prove_balance(user_id, amount)
            tx_hash = await add_transaction(user_id, -amount, 'withdraw')
            # if w3 and usd_token and PRIVATE_KEY: # Removed blockchain logic
            #     tx_burn = usd_token.functions.burnFromGame(user['address'], int(amount * 1e18)).buildTransaction({
            #         'from': w3.eth.default_account,
            #         'gas': 100000,
            #         'nonce': w3.eth.get_transaction_count(w3.eth.default_account)
            #     })
            #     signed_tx_burn = w3.eth.account.sign_transaction(tx_burn, private_key=PRIVATE_KEY)
            #     w3.eth.send_raw_transaction(signed_tx_burn.rawTransaction)
                
            #     tx_withdraw = contract.functions.withdraw().buildTransaction({
            #         'from': w3.eth.default_account,
            #         'gas': 100000,
            #         'nonce': w3.eth.get_transaction_count(w3.eth.default_account) + 1
            #     })
            #     signed_tx_withdraw = w3.eth.account.sign_transaction(tx_withdraw, private_key=PRIVATE_KEY)
            #     w3.eth.send_raw_transaction(signed_tx_withdraw.rawTransaction)
            await update_user(user_id, {'gameBalances': user['gameBalances'] - amount})
            await (update.callback_query.message.reply_text if update.callback_query else update.message.reply_text)(
                f"üí∏ –í—ã–≤–æ–¥ {amount} USDToken —É—Å–ø–µ—à–µ–Ω! –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: {tx_hash}\n–ë–∞–ª–∞–Ω—Å: {user['gameBalances'] - amount:.2f} USDToken"
            )
        except (IndexError, ValueError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ withdraw: {e}")
            await (update.callback_query.message.reply_text if update.callback_query else update.message.reply_text)(
                "–û—à–∏–±–∫–∞! –ò—Å–ø–æ–ª—å–∑—É–π: /withdraw <—Å—É–º–º–∞>"
            )